{"message":"`main` function not found in crate `card`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/bin/card.rs","byte_start":1,"byte_end":1311,"line_start":2,"line_end":75,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod card { ","highlight_start":1,"highlight_end":16},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[derive(Copy, Clone)]","highlight_start":1,"highlight_end":27},{"text":"    /*Card Struct","highlight_start":1,"highlight_end":18},{"text":"        Used to hold the suit and number(pip) of each individual card type","highlight_start":1,"highlight_end":75},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    pub struct Card {","highlight_start":1,"highlight_end":22},{"text":"        suit : Suit,","highlight_start":1,"highlight_end":21},{"text":"        number : Number","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /* Suit Enum","highlight_start":1,"highlight_end":17},{"text":"        Holds each card suit type","highlight_start":1,"highlight_end":34},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[derive(Copy, Clone, Debug)]","highlight_start":1,"highlight_end":34},{"text":"    pub enum Suit {","highlight_start":1,"highlight_end":20},{"text":"        Ace,","highlight_start":1,"highlight_end":13},{"text":"        Diamond,","highlight_start":1,"highlight_end":17},{"text":"        Heart,","highlight_start":1,"highlight_end":15},{"text":"        Spade","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /* Number Enum","highlight_start":1,"highlight_end":19},{"text":"        Holds each pip type for all card options","highlight_start":1,"highlight_end":49},{"text":"    */","highlight_start":1,"highlight_end":7},{"text":"    #[derive(Copy, Clone, Debug)]","highlight_start":1,"highlight_end":34},{"text":"    pub enum Number {","highlight_start":1,"highlight_end":22},{"text":"        Two,","highlight_start":1,"highlight_end":13},{"text":"        Three,","highlight_start":1,"highlight_end":15},{"text":"        Four,","highlight_start":1,"highlight_end":14},{"text":"        Five,","highlight_start":1,"highlight_end":14},{"text":"        Six,","highlight_start":1,"highlight_end":13},{"text":"        Seven,","highlight_start":1,"highlight_end":15},{"text":"        Eight,","highlight_start":1,"highlight_end":15},{"text":"        Nine,","highlight_start":1,"highlight_end":14},{"text":"        Ten,","highlight_start":1,"highlight_end":13},{"text":"        Jack,","highlight_start":1,"highlight_end":14},{"text":"        Queen,","highlight_start":1,"highlight_end":15},{"text":"        King,","highlight_start":1,"highlight_end":14},{"text":"        Ace","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl Card {","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /* New","highlight_start":1,"highlight_end":15},{"text":"            Generates new card given a number enum and suit enum","highlight_start":1,"highlight_end":65},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"        pub fn new(n : Number, s : Suit) -> Card  {","highlight_start":1,"highlight_end":52},{"text":"            Card {","highlight_start":1,"highlight_end":19},{"text":"                suit : s,","highlight_start":1,"highlight_end":26},{"text":"                number : n","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /* get_suit","highlight_start":1,"highlight_end":20},{"text":"            Returns the card suit of given card","highlight_start":1,"highlight_end":48},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"        pub fn get_suit(self) -> Suit {","highlight_start":1,"highlight_end":40},{"text":"            self.suit","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /* get_number","highlight_start":1,"highlight_end":22},{"text":"            Returns the number of the given card    ","highlight_start":1,"highlight_end":53},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"        pub fn get_number(self) -> Number {","highlight_start":1,"highlight_end":44},{"text":"            self.number","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/bin/card.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `card`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/card.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod card { \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Copy, Clone)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/bin/card.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
